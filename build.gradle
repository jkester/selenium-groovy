apply plugin: 'groovy'
apply plugin: 'java';
apply plugin: 'eclipse'
//apply plugin: 'idea'

import org.apache.tools.ant.taskdefs.condition.Os
task checkWin() << {
	if ( Os.isFamily(Os.FAMILY_WINDOWS) ) println "*** WINDOWS *** "
}
	
task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
    jarFile = 'gradle/wrapper.jar'
}

// This project will work with the --offline arg if you don't have internet access.
// The initial run (of course) requires internet to download the libs.

ext {
    projTitle = 'selenium-groovy'
    projVersion = '1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
    compile group: 'junit', name: 'junit', version: '4.+'
    compile group: 'commons-io', name: 'commons-io', version: '1.3.+'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.+'
    //compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.+'
	compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.+'
	compile gradleApi()
    groovy localGroovy()
}

task copyToLib(type: Copy) {
    into "lib"
    from configurations.runtime
}

defaultTasks 'copyToLib'

// run tests with -info or -debug option to get logging
tasks.withType(Test) {
	jvmArgs '-Xms128m', '-Xmx1024m', '-XX:MaxPermSize=128m'	
	testLogging {
		exceptionFormat "full"
		events "started", "passed", "skipped", "failed", "standardOut", "standardError"
		displayGranularity = 0
		showStandardStreams = false
	}	
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}   
	// System properties used by tests
	systemProperties['hub.ip'] = '127.0.0.1'
	systemProperties['hub.port'] = '4444'
	systemProperties['start.url'] = 'http://www.google.com/'
	systemProperties['login.username'] = 'myuser'
	systemProperties['login.password'] = 'password'
	systemProperties['webdriver.chrome.driver'] = 'chromedriver.exe'
	systemProperties['set.native.events'] = true
}

task runAllTestsInFirefox(type: Test) {
    maxParallelForks = 2
	systemProperties['browser.type'] = 'firefox'
	systemProperties['webdriver.firefox.logfile'] = 'logs/firefox-console.log'
	systemProperties['webdriver.log.file'] = System.getProperty("user.dir") + 'logs/webdriver.log'
    include '**/GroovyTest*.class'
    testReportDir = file("${reporting.baseDir}/GroovyTestFF")
	testResultsDir = file("${buildDir}/test-results/GroovyTestFF")
}

